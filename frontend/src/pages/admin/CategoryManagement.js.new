import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import FeatherIcon from 'feather-icons-react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import Card from '../../components/ui/Card';
import Button from '../../components/ui/Button';
import Badge from '../../components/ui/Badge';
import { categoryService } from '../../services/api';
import { useNotification } from '../../context/NotificationContext';

const PageHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-lg);
`;

const PageTitle = styled.h1`
  font-size: 1.8rem;
  font-weight: 800;
  color: var(--text-primary);
  margin: 0;
`;

const SectionsContainer = styled.div`
  display: grid;
  grid-template-columns: 1fr 2fr;
  gap: var(--spacing-lg);
  
  @media (max-width: 992px) {
    grid-template-columns: 1fr;
  }
`;

const CategoryList = styled.div`
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
`;

const CategoryItem = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: var(--border-radius-sm);
  background-color: ${props => props.active ? 'var(--primary-light)' : 'transparent'};
  border: 1px solid ${props => props.active ? 'var(--primary)' : 'rgba(0, 0, 0, 0.1)'};
  transition: all 0.2s ease;
  cursor: pointer;
  
  &:hover {
    background-color: ${props => props.active ? 'var(--primary-light)' : 'rgba(0, 0, 0, 0.03)'};
    border-color: ${props => props.active ? 'var(--primary)' : 'rgba(0, 0, 0, 0.2)'};
  }
`;

const CategoryName = styled.div`
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
`;

const SubcategoryList = styled.div`
  display: flex;
  flex-direction: column;
  gap: var(--spacing-xs);
  padding-left: var(--spacing-lg);
  margin-top: var(--spacing-xs);
  margin-bottom: var(--spacing-xs);
`;

const SubcategoryItem = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-xs) var(--spacing-md);
  border-radius: var(--border-radius-sm);
  background-color: ${props => props.active ? 'rgba(0, 0, 0, 0.05)' : 'transparent'};
  transition: all 0.2s ease;
  font-size: 0.9rem;
  
  &:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }
`;

const FormContainer = styled.div`
  margin-bottom: var(--spacing-lg);
`;

const FormGroup = styled.div`
  margin-bottom: var(--spacing-md);
  
  label {
    display: block;
    font-weight: 600;
    margin-bottom: var(--spacing-xs);
    font-size: 0.95rem;
  }
  
  input, select {
    width: 100%;
    padding: var(--spacing-sm);
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: var(--border-radius-sm);
    font-size: 1rem;
    
    &:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 2px var(--primary-light);
    }
  }
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: var(--spacing-sm);
  justify-content: flex-end;
`;

const ErrorText = styled.div`
  color: var(--danger);
  font-size: 0.85rem;
  margin-top: var(--spacing-xs);
`;

const CountBadge = styled.span`
  background-color: var(--gray-light);
  color: var(--text-secondary);
  font-size: 0.8rem;
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
`;

const CategoryManagement = () => {
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedSubcategory, setSelectedSubcategory] = useState(null);
  const [loading, setLoading] = useState(true);
  const [formMode, setFormMode] = useState('category'); // 'category' o 'subcategory'
  const [editMode, setEditMode] = useState(false);
  const { showNotification } = useNotification();
  
  // Cargar categorías desde la API
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        const response = await categoryService.getHierarchy();
        
        // Transformar la respuesta al formato requerido por el componente
        const formattedCategories = response.data.map(category => ({
          id: category.id,
          name: category.name,
          icon: getCategoryIcon(category.name),
          count: category.productCount || 0,
          subcategories: category.subcategories.map(sub => ({
            id: sub.id,
            name: sub.name,
            count: sub.productCount || 0
          }))
        }));
        
        setCategories(formattedCategories);
      } catch (error) {
        console.error('Error al cargar categorías:', error);
        showNotification('Error al cargar las categorías', 'error');
      } finally {
        setLoading(false);
      }
    };
    
    fetchCategories();
  }, [showNotification]);
  
  // Función auxiliar para determinar iconos basados en nombres de categorías
  const getCategoryIcon = (categoryName) => {
    const name = categoryName.toLowerCase();
    if (name.includes('computadora') || name.includes('notebook') || name.includes('desktop')) {
      return 'monitor';
    } else if (name.includes('celular') || name.includes('smartphone') || name.includes('móvil')) {
      return 'smartphone';
    } else if (name.includes('periférico')) {
      return 'mouse-pointer';
    } else if (name.includes('consumible')) {
      return 'box';
    } else if (name.includes('componente')) {
      return 'hard-drive';
    } else if (name.includes('red') || name.includes('network')) {
      return 'wifi';
    } else if (name.includes('impresora')) {
      return 'printer';
    }
    
    return 'grid'; // Icono por defecto
  };
  
  const handleCategorySelect = (category) => {
    setSelectedCategory(category);
    setSelectedSubcategory(null);
    setFormMode('subcategory');
    setEditMode(false);
  };
  
  const handleSubcategorySelect = (subcategory) => {
    setSelectedSubcategory(subcategory);
    setFormMode('subcategory');
    setEditMode(true);
  };
  
  const handleAddCategory = async (values, { resetForm }) => {
    try {
      // Crear nueva categoría en la API
      const response = await categoryService.create({
        name: values.name,
        parentId: null // Categoría principal
      });
      
      // Actualizar la lista local
      const newCategory = {
        id: response.data.id,
        name: values.name,
        icon: getCategoryIcon(values.name),
        count: 0,
        subcategories: []
      };
      
      setCategories([...categories, newCategory]);
      resetForm();
      showNotification('Categoría creada correctamente', 'success');
    } catch (error) {
      console.error('Error al crear categoría:', error);
      showNotification('Error al crear la categoría', 'error');
    }
  };
  
  const handleEditCategory = async (values, { resetForm }) => {
    try {
      // Actualizar categoría en la API
      await categoryService.update(selectedCategory.id, {
        name: values.name
      });
      
      // Actualizar la lista local
      const updatedCategories = categories.map(cat => 
        cat.id === selectedCategory.id ? 
        { ...cat, name: values.name, icon: getCategoryIcon(values.name) } : 
        cat
      );
      
      setCategories(updatedCategories);
      setSelectedCategory(null);
      setEditMode(false);
      resetForm();
      setFormMode('category');
      showNotification('Categoría actualizada correctamente', 'success');
    } catch (error) {
      console.error('Error al actualizar categoría:', error);
      showNotification('Error al actualizar la categoría', 'error');
    }
  };
  
  const handleAddSubcategory = async (values, { resetForm }) => {
    try {
      // Crear subcategoría en la API
      const response = await categoryService.create({
        name: values.name,
        parentId: selectedCategory.id
      });
      
      // Actualizar la lista local
      const newSubcategory = {
        id: response.data.id,
        name: values.name,
        count: 0
      };
      
      const updatedCategories = categories.map(cat => 
        cat.id === selectedCategory.id ? 
        { ...cat, subcategories: [...cat.subcategories, newSubcategory] } : 
        cat
      );
      
      setCategories(updatedCategories);
      resetForm();
      showNotification('Subcategoría creada correctamente', 'success');
    } catch (error) {
      console.error('Error al crear subcategoría:', error);
      showNotification('Error al crear la subcategoría', 'error');
    }
  };
  
  const handleEditSubcategory = async (values, { resetForm }) => {
    try {
      // Actualizar subcategoría en la API
      await categoryService.update(selectedSubcategory.id, {
        name: values.name
      });
      
      // Actualizar la lista local
      const updatedCategories = categories.map(cat => {
        if (cat.id === selectedCategory.id) {
          const updatedSubcategories = cat.subcategories.map(sub => 
            sub.id === selectedSubcategory.id ? { ...sub, name: values.name } : sub
          );
          return { ...cat, subcategories: updatedSubcategories };
        }
        return cat;
      });
      
      setCategories(updatedCategories);
      setSelectedSubcategory(null);
      setEditMode(false);
      resetForm();
      showNotification('Subcategoría actualizada correctamente', 'success');
    } catch (error) {
      console.error('Error al actualizar subcategoría:', error);
      showNotification('Error al actualizar la subcategoría', 'error');
    }
  };
  
  const handleDeleteCategory = async (categoryId) => {
    try {
      if (window.confirm('¿Está seguro que desea eliminar esta categoría? Esta acción no se puede deshacer.')) {
        // Eliminar categoría en la API
        await categoryService.delete(categoryId);
        
        // Actualizar la lista local
        const updatedCategories = categories.filter(cat => cat.id !== categoryId);
        setCategories(updatedCategories);
        setSelectedCategory(null);
        showNotification('Categoría eliminada correctamente', 'success');
      }
    } catch (error) {
      console.error('Error al eliminar categoría:', error);
      showNotification('Error al eliminar la categoría', 'error');
    }
  };
  
  const handleDeleteSubcategory = async (categoryId, subcategoryId) => {
    try {
      if (window.confirm('¿Está seguro que desea eliminar esta subcategoría? Esta acción no se puede deshacer.')) {
        // Eliminar subcategoría en la API
        await categoryService.delete(subcategoryId);
        
        // Actualizar la lista local
        const updatedCategories = categories.map(cat => {
          if (cat.id === categoryId) {
            const updatedSubcategories = cat.subcategories.filter(sub => sub.id !== subcategoryId);
            return { ...cat, subcategories: updatedSubcategories };
          }
          return cat;
        });
        
        setCategories(updatedCategories);
        setSelectedSubcategory(null);
        showNotification('Subcategoría eliminada correctamente', 'success');
      }
    } catch (error) {
      console.error('Error al eliminar subcategoría:', error);
      showNotification('Error al eliminar la subcategoría', 'error');
    }
  };
  
  // Esquema de validación para formulario
  const validationSchema = Yup.object().shape({
    name: Yup.string().required('El nombre es obligatorio'),
    icon: Yup.string()
  });
  
  // Mostrar spinner durante la carga
  if (loading) {
    return (
      <div>
        <PageTitle>Gestión de Categorías</PageTitle>
        <Card>
          <div style={{ display: 'flex', justifyContent: 'center', padding: 'var(--spacing-xl)' }}>
            <FeatherIcon icon="loader" size={32} className="spin" />
          </div>
        </Card>
      </div>
    );
  }
  
  return (
    <div>
      <PageHeader>
        <PageTitle>Gestión de Categorías</PageTitle>
      </PageHeader>
      
      <SectionsContainer>
        <div>
          <Card>
            <h2 style={{ marginTop: 0, marginBottom: 'var(--spacing-md)' }}>Categorías</h2>
            
            <CategoryList>
              {categories.map(category => (
                <div key={category.id}>
                  <CategoryItem 
                    active={selectedCategory && selectedCategory.id === category.id}
                    onClick={() => handleCategorySelect(category)}
                  >
                    <CategoryName>
                      <FeatherIcon icon={category.icon} size={16} />
                      {category.name}
                    </CategoryName>
                    
                    <div style={{ display: 'flex', alignItems: 'center', gap: 'var(--spacing-sm)' }}>
                      <CountBadge>{category.count}</CountBadge>
                      <Button 
                        variant="icon" 
                        title="Eliminar categoría"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteCategory(category.id);
                        }}
                      >
                        <FeatherIcon icon="trash-2" size={16} />
                      </Button>
                    </div>
                  </CategoryItem>
                  
                  {/* Mostrar subcategorías si la categoría está seleccionada */}
                  {selectedCategory && selectedCategory.id === category.id && (
                    <SubcategoryList>
                      {category.subcategories.map(subcategory => (
                        <SubcategoryItem 
                          key={subcategory.id}
                          active={selectedSubcategory && selectedSubcategory.id === subcategory.id}
                          onClick={() => handleSubcategorySelect(subcategory)}
                        >
                          {subcategory.name}
                          
                          <div style={{ display: 'flex', alignItems: 'center', gap: 'var(--spacing-sm)' }}>
                            <CountBadge>{subcategory.count}</CountBadge>
                            <Button 
                              variant="icon" 
                              title="Eliminar subcategoría"
                              onClick={(e) => {
                                e.stopPropagation();
                                handleDeleteSubcategory(category.id, subcategory.id);
                              }}
                            >
                              <FeatherIcon icon="trash-2" size={14} />
                            </Button>
                          </div>
                        </SubcategoryItem>
                      ))}
                    </SubcategoryList>
                  )}
                </div>
              ))}
            </CategoryList>
          </Card>
        </div>
        
        <div>
          <Card>
            <h2 style={{ marginTop: 0, marginBottom: 'var(--spacing-md)' }}>
              {formMode === 'category' ? 'Nueva Categoría' : 
               (editMode ? 'Editar Subcategoría' : `Nueva Subcategoría en ${selectedCategory?.name}`)}
            </h2>
            
            <Formik
              initialValues={{
                name: selectedSubcategory?.name || '',
                icon: selectedCategory?.icon || 'box'
              }}
              validationSchema={validationSchema}
              onSubmit={formMode === 'category' ? 
                       handleAddCategory : 
                       (editMode ? handleEditSubcategory : handleAddSubcategory)}
              enableReinitialize
            >
              {({ isSubmitting }) => (
                <Form>
                  <FormGroup>
                    <label htmlFor="name">Nombre</label>
                    <Field type="text" id="name" name="name" placeholder="Nombre de la categoría" />
                    <ErrorMessage name="name" component={ErrorText} />
                  </FormGroup>
                  
                  {formMode === 'category' && (
                    <FormGroup>
                      <label htmlFor="icon">Icono</label>
                      <Field as="select" id="icon" name="icon">
                        <option value="box">Caja</option>
                        <option value="monitor">Monitor</option>
                        <option value="smartphone">Celular</option>
                        <option value="hard-drive">Disco</option>
                        <option value="cpu">CPU</option>
                        <option value="printer">Impresora</option>
                        <option value="wifi">Red</option>
                        <option value="mouse-pointer">Periféricos</option>
                        <option value="database">Base de datos</option>
                        <option value="server">Servidor</option>
                        <option value="grid">Otro</option>
                      </Field>
                    </FormGroup>
                  )}
                  
                  <ButtonGroup>
                    {(formMode !== 'category' || editMode) && (
                      <Button 
                        type="button" 
                        variant="outline"
                        onClick={() => {
                          setFormMode('category');
                          setSelectedCategory(null);
                          setSelectedSubcategory(null);
                          setEditMode(false);
                        }}
                      >
                        Cancelar
                      </Button>
                    )}
                    
                    <Button type="submit" variant="primary" disabled={isSubmitting}>
                      {isSubmitting ? (
                        <>
                          <FeatherIcon icon="loader" size={16} className="spin" />
                          Guardando...
                        </>
                      ) : (
                        <>
                          <FeatherIcon icon="save" size={16} />
                          {editMode ? 'Actualizar' : 'Guardar'}
                        </>
                      )}
                    </Button>
                  </ButtonGroup>
                </Form>
              )}
            </Formik>
          </Card>
        </div>
      </SectionsContainer>
    </div>
  );
};

export default CategoryManagement;
